#[cfg(test)]
mod tests {

    use crate::*;

    #[test]
    fn t1() {
        let ins = [
            0xb7, 0x01, 0x00, 0x00, 0x72, 0x6c, 0x64, 0x0a, // r1 = 174353522
            0x63, 0x1a, 0xf8, 0xff, 0x00, 0x00, 0x00, 0x00, // *(u32 *)(r10 - 8) = r1
            0x18, 0x01, 0x00, 0x00, 0x48, 0x65, 0x6c, 0x6c, //
            0x00, 0x00, 0x00, 0x00, 0x6f, 0x20, 0x57, 0x6f, // r1 = 8022916924116329800 ll
            0x7b, 0x1a, 0xf0, 0xff, 0x00, 0x00, 0x00, 0x00, // *(u64 *)(r10 - 16) = r1
            0xb7, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // r1 = 0
            0x73, 0x1a, 0xfc, 0xff, 0x00, 0x00, 0x00, 0x00, // *(u8 *)(r10 - 4) = r1
            0xbf, 0xa1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // r1 = r10
            0x07, 0x01, 0x00, 0x00, 0xf0, 0xff, 0xff, 0xff, // r1 += -16
            0xb7, 0x02, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, // r2 = 13
            0x85, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, // call 6
            0xb7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // r0 = 0
            0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // exit
        ];
        /*
                 mov r1,#174353522
                 stxw r10-8, r1
                 lddw r1, #1819043144
                 stxdw r10-16, r1
                 mov r1,#0
                 stxb r10-4, r1
                 mov r1,r10
                 add r1,#-16
                 mov r2,#13
                 call #6
                 mov r0,#0
                 exit
        */
        let instructions = Instructions::from_bytes(ins.as_slice());
        println!("{:?}", instructions);
        // let a=1819043144;
        // let b=
        // println!("instruction:{}", r);
    }

    #[test]
    fn t2() {
        let ins = [
            0xbf, 0xa2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // r2 = r10
            0x07, 0x02, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, // r2 += -4
            0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
            0x85, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // lddw r1, #4294967296
            0x15, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // if r0 == 0 goto +3 <LBB0_20>
            0x79, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // r1 = *(u64 *)(r0 + 0)
            0x07, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // r1 += 1
            0x7b, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // *(u64 *)(r0 + 0) = r1
        ];

        /*
           mov r2,r10
           add r2,#-4
           lddw r1, #4294967296
           call #1
           jeq r0,#0, 3
           ldxdw r1, r0
           add r1,#1
           stxdw r0, r1
        */
        let instructions = Instructions::from_bytes(ins.as_slice());
        println!("{:?}", instructions);
    }
}
